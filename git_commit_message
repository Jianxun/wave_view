feat(core): implement WaveDataset class with comprehensive TDD approach

âœ… **Complete WaveDataset Implementation**
- Added WaveDataset class in src/wave_view/core/wavedataset.py
- Modern replacement for SpiceData with metadata support
- Designed for new v0.2.0 API architecture

ðŸ§ª **Comprehensive Test Coverage (9 tests, 80% coverage)**
- TestWaveDatasetFromRaw: Factory method with/without metadata
- TestWaveDatasetSignals: Lowercase signal name normalization
- TestWaveDatasetGetSignal: Signal access with case-insensitive handling
- TestWaveDatasetHasSignal: Signal existence checking
- TestWaveDatasetMetadata: Metadata property access

ðŸ”§ **Key Features Implemented**
- WaveDataset.from_raw() factory method with optional metadata
- signals property (lowercase normalized signal names)
- get_signal() method with case-insensitive signal access
- has_signal() method for signal existence checking
- metadata property with proper encapsulation (returns copy)
- Full error handling with descriptive messages

ðŸ“¦ **Package Integration**
- Added WaveDataset to main __init__.py exports
- Available as: import wave_view as wv; wv.WaveDataset
- Maintains backward compatibility with existing SpiceData

ðŸŽ¯ **TDD Methodology Success**
- Followed strict Red-Green-Refactor cycle
- Implemented one feature at a time with immediate test verification
- Achieved 80% test coverage with comprehensive edge case handling
- Progressive development with atomic commits

This completes Phase 1 of v0.2.0 development - Simple WaveDataset implementation.
Next: Phase 2 - HTML Report Builder or continue with API integration. 